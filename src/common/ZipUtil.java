package common;import org.springframework.web.multipart.MultipartFile;import java.io.*;import java.util.Enumeration;import java.util.List;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipOutputStream;public class ZipUtil {    /**     * 功能:压缩多个文件成一个zip文件     * @param srcfile：源文件列表     * @param zipfile：压缩后的文件     */    public static void zipFiles(File[] srcfile,File zipfile){        byte[] buf=new byte[1024];        try {            //ZipOutputStream类：完成文件或文件夹的压缩            ZipOutputStream out=new ZipOutputStream(new FileOutputStream(zipfile));            for(int i=0;i<srcfile.length;i++){                FileInputStream in=new FileInputStream(srcfile[i]);                out.putNextEntry(new ZipEntry(srcfile[i].getName()));                int len;                while((len=in.read(buf))>0){                    out.write(buf,0,len);                }                out.closeEntry();                in.close();            }            out.close();        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * 功能:解压缩     * @param zipfile：需要解压缩的文件     * @param descDir：解压后的目标目录     */    public static void unZipFiles(File zipfile,String descDir){        try {            File f = new File(descDir);            if (!f.exists()) {                f.mkdirs();            }            ZipFile zf=new ZipFile(zipfile);            for(Enumeration entries=zf.entries();entries.hasMoreElements();){                ZipEntry entry=(ZipEntry) entries.nextElement();                String zipEntryName=entry.getName();                InputStream in=zf.getInputStream(entry);                OutputStream out=new FileOutputStream(descDir+zipEntryName);                byte[] buf1=new byte[1024];                int len;                while((len=in.read(buf1))>0){                    out.write(buf1,0,len);                }                in.close();                out.close();                System.out.println("解压缩完成.");            }            File file=new File(descDir);            File[] tempList = file.listFiles();            System.out.println("该目录下对象个数："+tempList.length);            for (int i = 0; i < tempList.length; i++) {                if (tempList[i].isFile()) {                    System.out.println("文     件：" + tempList[i]);                }                if (tempList[i].isDirectory()) {                    System.out.println("文件夹：" + tempList[i]);                }            }        } catch (Exception e) {            // TODO Auto-generated catch block            e.printStackTrace();        }finally {            deleteDir(descDir);        }    }    /**功能:     */   /* public static void main(String[] args) {        //2个源文件        File f1=new File("E:\\翟斌---0323\\123\\test.docx");        File f2=new File("E:\\翟斌---0323\\123\\test1.docx");        File[] srcfile={f1,f2};        //压缩后的文件路径        File zipfile=new File("E:\\翟斌---0323\\123\\test.zip");        TssZipUtil.zipFiles(srcfile, zipfile);        //需要解压缩的文件//        File file=new File("E:\\翟斌---0323\\123\\biao.zip");        //解压后的目标目录//        String dir="E:\\翟斌---0323\\123\\test\\";//        TssZipUtil.unZipFiles(file, dir);    }*/    /**     * 删除文件     *     * @param file     * @return     */    public static boolean deleteFile(String file) {        return new File(file).delete();    }    /**     * 递归删除目录下的所有文件及子目录下所有文件     *     * @param dir     * @return     */    private static boolean deleteDir(File dir) {        if (dir.isDirectory()) {            String[] children = dir.list();            //递归删除目录中的子目录下            for (String aChildren : children) {                boolean success = deleteDir(new File(dir, aChildren));                if (!success) {                    return false;                }            }        }        // 目录此时为空，可以删除        return dir.delete();    }    /**     * 递归删除目录下的所有文件及子目录下所有文件     *     * @param dirList     * @return     */    public static boolean deleteDirList(List<File> dirList) {        boolean flag=false;        for(File dir:dirList){            if (dir.isDirectory()) {                String[] children = dir.list();                //递归删除目录中的子目录下                for (String aChildren : children) {                    boolean success = deleteDir(new File(dir, aChildren));                    if (!success) {                        return false;                    }                }            }            // 目录此时为空，可以删除            flag=dir.delete();        }        return flag;    }    /**     * 递归删除目录下的所有文件及子目录下所有文件     *     * @param dir 将要删除的文件目录     * @return boolean Returns "true" if all deletions were successful.     * If a deletion fails, the method stops attempting to     * delete and returns "false".     */    public static boolean deleteDir(String dir) {        // 目录此时为空，可以删除        return deleteDir(new File(dir));    }    /**     * 功能:压缩多个文件成一个zip文件     * @param srcfile：源文件列表     * @param zipfile：压缩后的文件     */    public static void zipFilesList(List<MultipartFile> srcfile, File zipfile){        byte[] buf=new byte[1024];        InputStream in=null;        try {            //ZipOutputStream类：完成文件或文件夹的压缩            ZipOutputStream out=new ZipOutputStream(new FileOutputStream(zipfile));            for(int i=0;i<srcfile.size();i++){                in=srcfile.get(i).getInputStream();                out.putNextEntry(new ZipEntry(srcfile.get(i).getOriginalFilename()));                int len;                while((len=in.read(buf))>0){                    out.write(buf,0,len);                }                out.closeEntry();                in.close();            }            out.close();        } catch (Exception e) {            // TODO Auto-generated catch block            e.printStackTrace();        }finally {            if (in != null) {                try {                    in.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    /**     * 功能:压缩多个文件成一个zip文件     * @param in：源文件输入流     * @param zipfile：压缩后的文件     */    public static void zipFileList(InputStream in, File zipfile){        byte[] buf=new byte[1024];        try {            //ZipOutputStream类：完成文件或文件夹的压缩            ZipOutputStream out=new ZipOutputStream(new FileOutputStream(zipfile));            out.putNextEntry(new ZipEntry("position-table.docx"));            int len;            while((len=in.read(buf))>0){                out.write(buf,0,len);            }            out.closeEntry();            in.close();            out.close();        } catch (Exception e) {            // TODO Auto-generated catch block            e.printStackTrace();        }finally {            if (in != null) {                try {                    in.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    /**     * 功能:压缩多个文件成一个zip文件     * @param srcfile：源文件列表     * @param zipStr：压缩后的文件名称     * @return  最后压缩包的文件名称     */    public static String zipFileLists(List<File> srcfile, String zipStr){        File zipfile = new File(zipStr);        byte[] buf=new byte[1024];        InputStream in=null;        try {            //ZipOutputStream类：完成文件或文件夹的压缩            ZipOutputStream out=new ZipOutputStream(new FileOutputStream(zipfile));            for(int i=0;i<srcfile.size();i++){                in=new FileInputStream(srcfile.get(i));                out.putNextEntry(new ZipEntry(srcfile.get(i).getName()));                int len;                while((len=in.read(buf))>0){                    out.write(buf,0,len);                }                out.closeEntry();                in.close();            }            out.close();        } catch (Exception e) {            // TODO Auto-generated catch block            e.printStackTrace();        }finally {            if (in != null) {                try {                    in.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        return zipStr;    }    /*public static void main(String[] args) throws Exception{        File file = new File("/Users/wumiaogong/Desktop/abc/position-table.docx");        File file2 = new File("/Users/wumiaogong/Desktop/abc/18号智能推荐外需求.png");        File descfile = new File("/Users/wumiaogong/Desktop/abc.zip");       // InputStream inputStream = new FileInputStream(file);        List<File> files = new ArrayList<>();        files.add(file);        files.add(file2);        zipFileLists(files,descfile);        deleteDirList(files);    }*/}